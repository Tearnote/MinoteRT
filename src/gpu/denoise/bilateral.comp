#version 460
#pragma shader_stage(compute)

#include "../random.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform sampler2D s_color;
layout(binding = 1) uniform sampler2D s_depth;
layout(binding = 2) uniform sampler2D s_normal;
layout(binding = 3) restrict writeonly uniform image2D i_dst;
layout(push_constant) uniform Constants {
    float sigma;
    float kSigma;
    float threshold;
    uint frameCounter;
} C;

#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439  // 1.0/SQRT_OF_2PI
#define INV_PI 0.31830988618379067153776752674503

vec4 smartDeNoise(sampler2D tex, sampler2D depthTex, sampler2D normTex, vec2 uv, float sigma, float kSigma, float threshold) {
    float radius = round(kSigma*sigma);
    float radQ = radius * radius;

    float invSigmaQx2 = .5 / (sigma * sigma);      // 1.0 / (sigma^2 * 2.0)
    float invSigmaQx2PI = INV_PI * invSigmaQx2;    // 1/(2 * PI * sigma^2)

    float invThresholdSqx2 = .5 / (threshold * threshold);     // 1.0 / (sigma^2 * 2.0)
    float invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;   // 1.0 / (sqrt(2*PI) * sigma^2)

    vec4 centrPx = texture(tex,uv);
    float centrZ = texture(depthTex,uv).x;
    vec3 centrN = texture(normTex,uv).xyz;

    float zBuff = 0.0;
    vec4 aBuff = vec4(0.0);
    vec2 size = vec2(textureSize(tex, 0));

    vec2 d;
    for (d.x=-radius; d.x <= radius; d.x++) {
        float pt = sqrt(radQ-d.x*d.x);       // pt = yRadius: have circular trend
        for (d.y=-pt; d.y <= pt; d.y++) {
            float blurFactor = exp( -dot(d , d) * invSigmaQx2 ) * invSigmaQx2PI;

            vec4 walkPx =  texture(tex,uv+d/size);
            float walkZ =  texture(depthTex,uv+d/size).x;
            vec3 walkN =  texture(normTex,uv+d/size).xyz;
            float dZ = walkZ - centrZ;
            float dN = dot(walkN, centrN);
            float deltaFactor = exp(clamp((dN - dZ*dZ), 0.0, 1.0) * invThresholdSqx2) * invThresholdSqrt2PI * blurFactor;

            zBuff += deltaFactor;
            aBuff += deltaFactor*walkPx;
        }
    }
    return aBuff/zBuff;
}

void main() {
    const uvec2 Gid = gl_GlobalInvocationID.xy;
    const uvec2 DstSize = uvec2(imageSize(i_dst));
    if (any(greaterThanEqual(Gid, DstSize))) return;

    vec2 uv = (vec2(Gid) + vec2(0.5)) / vec2(DstSize);
    vec4 filtered = smartDeNoise(s_color, s_depth, s_normal, uv, C.sigma, C.kSigma, C.threshold);

    uint seed = Gid.x * 709u + Gid.y * 1153u + C.frameCounter * 1361u;
    vec3 noise = vec3(randomFloat(seed)) * 0.005;
    filtered.xyz += noise;

    imageStore(i_dst, ivec2(Gid), filtered);
}
