#version 460
#pragma shader_stage(compute)

layout(local_size_x = 8, local_size_y = 8) in;

#include "skyTypes.glsl"

#define U_ATMO u_atmo

layout(binding = 0) uniform Atmosphere {
    AtmosphereParams U_ATMO;
};
layout(binding = 1) restrict writeonly uniform image2D i_transmittance;

layout(constant_id = 0) const uint TransmittanceSizeWidth = 0;
layout(constant_id = 1) const uint TransmittanceSizeHeight = 0;
const uvec2 TransmittanceSize = uvec2(TransmittanceSizeWidth, TransmittanceSizeHeight);

#include "sky.glsl"

void main() {
    const uvec2 Gid = gl_GlobalInvocationID.xy;
    if (any(greaterThan(Gid, TransmittanceSize))) return;

    // Compute camera position from LUT coords
    vec2 uv = (vec2(Gid) + vec2(0.5)) / vec2(TransmittanceSize);
    float viewHeight;
    float viewZenithCosAngle;
    uvToLutTransmittanceParams(viewHeight, viewZenithCosAngle, uv, u_atmo.bottomRadius, u_atmo.topRadius);

    // A few extra needed constants
    vec3 worldPos = vec3(0.0, 0.0, viewHeight);
    vec3 worldDir = vec3(0.0, sqrt(1.0 - viewZenithCosAngle * viewZenithCosAngle), viewZenithCosAngle);

    bool ground = false;
    float sampleCountIni = 40.0;	// Can go as low as 10 sample but energy lost starts to be visible.
    bool variableSampleCount = false;
    bool mieRayPhase = false;
    vec3 result = exp(-integrateScatteredLuminance(worldPos, worldDir, vec3(1.0)/*unused*/,
    ground, sampleCountIni, variableSampleCount, mieRayPhase, 9000000.0, vec3(1.0)).opticalDepth);

    // Optical depth to transmittance
    imageStore(i_transmittance, ivec2(Gid), vec4(result, 1.0));
}
