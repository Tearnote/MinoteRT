#version 460
#pragma shader_stage(compute)

#include "intersect.glsl"
#include "random.glsl"
#include "scene.glsl"
#include "sky/skyAccess.glsl"
#include "sky/skyTypes.glsl"

#define U_ATMO u_atmo
#define S_TRANSMITTANCE s_transmittance

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform usampler2D s_visibility;
layout(binding = 1) uniform sampler2D s_depth;
layout(binding = 2) uniform sampler2D s_normal;
layout(binding = 3) uniform sampler2D s_blueNoise;
layout(binding = 4) uniform sampler2D S_TRANSMITTANCE;
layout(binding = 5) uniform sampler2D s_skyView;
layout(binding = 6) uniform Atmosphere {
	AtmosphereParams U_ATMO;
};
layout(binding = 7) restrict writeonly uniform image2D i_color;
layout(binding = 8) uniform Constants {
	mat4 view;
	mat4 projection;
	mat4 invView;
	mat4 invProjection;
	vec3 cameraPos;
	uint frameCounter;
} C;

#include "sky/sky.glsl"

vec3 skyColor(vec3 dir) {
	vec3 worldPos = C.cameraPos + vec3(0.0, 0.0, u_atmo.bottomRadius);
	vec2 uv;
	vec3 upVector = normalize(worldPos);
	float viewZenithCosAngle = dot(dir, upVector);
	float viewHeight = length(worldPos);

	const vec3 sunDirection = {-0.435286462f, 0.818654716f, 0.374606609f};
	const vec3 sunIlluminance = vec3(8.0f);
	vec3 sideVector = normalize(cross(upVector, dir)); // assumes non parallel vectors
	vec3 forwardVector = normalize(cross(sideVector, upVector)); // aligns toward the sun light but perpendicular to up vector
	vec2 lightOnPlane = vec2(dot(sunDirection, forwardVector), dot(sunDirection, sideVector));
	lightOnPlane = normalize(lightOnPlane);
	float lightViewCosAngle = lightOnPlane.x;

	bool intersectGround = (raySphereIntersectNearest(worldPos, dir, vec3(0.0), u_atmo.bottomRadius) >= 0.0);
	skyViewLutParamsToUv(intersectGround, viewZenithCosAngle, lightViewCosAngle, textureSize(s_skyView, 0), viewHeight, uv, u_atmo.bottomRadius);
	vec3 skyView = textureLod(s_skyView, uv, 0.0).rgb;
	vec3 sun = getSunLuminance(worldPos, dir, sunDirection, sunIlluminance)
		* (120000.0 / sunIlluminance);

	return skyView + sun;
}

float rotatedRandom(inout uint state, float rotation) {
	return fract(randomFloat(state) + rotation);
}

vec3 traceSecondaryRays(Intersection primaryHit, uint maxDepth, inout uint rngState, vec2 rngRotation) {
	vec3 color = vec3(1.0);
	Intersection closestHit = primaryHit;
	for (uint i = 0; i < maxDepth; i += 1) {
		if (i > 0) {
			// Formulate ray
			Ray ray;
			ray.origin = closestHit.position + closestHit.normal * 0.000001;
			ray.direction = normalize(closestHit.normal + randomSpherePoint(vec2(rotatedRandom(rngState, rngRotation.x), rotatedRandom(rngState, rngRotation.y)) * 2.0 - 1.0));

			// Find closest hit
			closestHit.primitiveId = -1u;
			closestHit.t = -1.0;
			for (uint i = 0u; i < SphereCount; i += 1u) {
				float t = raySphereIntersect(ray, Spheres[i]);
				if (t >= 0.0 && (t < closestHit.t || closestHit.t < 0.0)) {
					closestHit.primitiveId = i;
					closestHit.t = t;
				}
			}
			if (closestHit.primitiveId != -1u) {
				closestHit.position = rayAt(ray, closestHit.t);
				closestHit.normal = normalize(closestHit.position - Spheres[closestHit.primitiveId].center);
			} else {
				closestHit.normal = ray.direction;
			}
		}

		// Return or spawn secondary ray
		if (closestHit.primitiveId != -1u) {
			color *= Spheres[closestHit.primitiveId].albedo;
		} else {
			return color * skyColor(closestHit.normal);
		}
	}
	return vec3(0.0);
}

void main() {
	// Output details
	const uvec2 Gid = gl_GlobalInvocationID.xy;
	const uvec2 OutBounds = uvec2(textureSize(s_visibility, 0));
	const vec2 OutPitch = vec2(1.0) / vec2(OutBounds);
	if (any(greaterThanEqual(Gid, OutBounds))) return;

	// Transformations
	vec2 uv = (vec2(Gid) + 0.5) * OutPitch;
	uv.y = 1.0 - uv.y;
	const vec3 CameraOrigin = vec3(C.invView * vec4(0.0, 0.0, 0.0, 1.0));

	// Reconstruct primary hit
	Intersection primaryHit;
	primaryHit.primitiveId = texelFetch(s_visibility, ivec2(Gid), 0).x;
	primaryHit.normal = texelFetch(s_normal, ivec2(Gid), 0).xyz;
	float depth = texelFetch(s_depth, ivec2(Gid), 0).x;
	vec3 ndcPos = vec3(uv * 2.0 - 1.0, depth);
	vec4 viewPos = C.invProjection * vec4(ndcPos, 1.0);
	viewPos.xyz /= viewPos.w;
	primaryHit.position = (C.invView * vec4(viewPos.xyz, 1.0)).xyz;
	primaryHit.t = length(primaryHit.position - CameraOrigin);
	uint seed = (C.frameCounter << 1u) | 1u;
	vec2 rotation = texelFetch(s_blueNoise, ivec2(Gid) % textureSize(s_blueNoise, 0), 0).xy;

	// Fire secondary rays
	const uint Samples = 8u;
	const uint Bounces = 8u;
	vec3 color = vec3(0.0);
	for (uint i = 0u; i < Samples; i += 1u)
		color += traceSecondaryRays(primaryHit, Bounces + 1u, seed, rotation);
	color /= Samples;
	imageStore(i_color, ivec2(Gid), vec4(color, 1.0));
}
