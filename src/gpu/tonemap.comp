#version 460
#pragma shader_stage(compute)
#extension GL_EXT_shader_image_load_formatted: enable

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform sampler2D s_src;
layout(binding = 1) restrict uniform image2D i_dst;

// Conversion from linear RGB to sRGB
// http://www.java-gaming.org/topics/fast-srgb-conversion-glsl-snippet/37583/view.html
vec3 srgbEncode(vec3 _color) {
    float r = _color.r < 0.0031308 ? 12.92 * _color.r : 1.055 * pow(_color.r, 1.0/2.4) - 0.055;
    float g = _color.g < 0.0031308 ? 12.92 * _color.g : 1.055 * pow(_color.g, 1.0/2.4) - 0.055;
    float b = _color.b < 0.0031308 ? 12.92 * _color.b : 1.055 * pow(_color.b, 1.0/2.4) - 0.055;
    return vec3(r, g, b);
}

vec3 uchimura(vec3 x, float P, float a, float m, float l, float c, float b) {
    float l0 = ((P - m) * l) / a;
    float L0 = m - m / a;
    float L1 = m + (1.0 - m) / a;
    float S0 = m + l0;
    float S1 = m + a * l0;
    float C2 = (a * P) / (P - S1);
    float CP = -C2 / P;

    vec3 w0 = vec3(1.0 - smoothstep(0.0, m, x));
    vec3 w2 = vec3(step(m + l0, x));
    vec3 w1 = vec3(1.0 - w0 - w2);

    vec3 T = vec3(m * pow(x / m, vec3(c)) + b);
    vec3 S = vec3(P - (P - S1) * exp(CP * (x - S0)));
    vec3 L = vec3(m + a * (x - m));

    return T * w0 + L * w1 + S * w2;
}

vec3 uchimura(vec3 x) {
    const float P = 1.0; // max display brightness
    const float a = 1.0; // contrast
    const float m = 0.16; // linear section start
    const float l = 0.2; // linear section length
    const float c = 1.2; // black
    const float b = 0.0; // pedestal

    return uchimura(x, P, a, m, l, c, b);
}

void main() {
    const uvec2 Gid = gl_GlobalInvocationID.xy;
    const uvec2 DstSize = uvec2(imageSize(i_dst));
    if (any(greaterThanEqual(Gid, DstSize))) return;

    vec4 sourceTex = texelFetch(s_src, ivec2(Gid), 0);
    vec3 mapped = uchimura(vec3(sourceTex));
//    vec3 mapped = vec3(sourceTex);
    imageStore(i_dst, ivec2(Gid), vec4(srgbEncode(mapped), 1.0));
}
