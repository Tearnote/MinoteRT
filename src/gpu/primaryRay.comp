#version 460
#pragma shader_stage(compute)
#extension GL_EXT_debug_printf: enable

#include "intersect.glsl"
#include "scene.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) restrict writeonly uniform uimage2D i_visibility;
layout(binding = 1) restrict writeonly uniform image2D i_depth;
layout(binding = 2) restrict writeonly uniform image2D i_normal;
layout(binding = 3) restrict writeonly uniform image2D i_motion;
layout(binding = 4) uniform Constants {
    mat4 view;
    mat4 projection;
    mat4 invView;
    mat4 invProjection;
    mat4 prevView;
    uint frameCounter;
} C;

Intersection tracePrimaryRay(Ray ray) {
    Intersection closestHit;
    closestHit.primitiveId = -1u;
    for (uint i = 0u; i < SphereCount; i += 1u) {
        float t = raySphereIntersect(ray, Spheres[i]);
        if (t >= 0.0 && (closestHit.primitiveId == -1u || t < closestHit.t)) {
            closestHit.t = t;
            closestHit.primitiveId = i;
        }
    }
    closestHit.position = rayAt(ray, closestHit.t);
    closestHit.normal = normalize(closestHit.position - Spheres[closestHit.primitiveId].center);
    return closestHit;
}

void main() {
    // Output details
    const uvec2 Gid = gl_GlobalInvocationID.xy;
    const uvec2 OutBounds = uvec2(imageSize(i_visibility));
    const vec2 OutPitch = vec2(1.0) / vec2(OutBounds);
    if (any(greaterThanEqual(Gid, OutBounds))) return;

    // Transformations
    vec2 uv = (vec2(Gid) + 0.5) * OutPitch;
    uv.y = 1.0 - uv.y;
    const vec3 CameraOrigin = vec3(C.invView * vec4(0.0, 0.0, 0.0, 1.0));
    vec3 ndcDir = vec3(uv * 2.0 - 1.0, 1.0);
    vec3 viewDir = (C.invProjection * vec4(ndcDir, 1.0)).xyz;
    vec3 worldDir = normalize((C.invView * vec4(viewDir, 0.0)).xyz);

    // Fire primary ray
    Ray ray;
    ray.origin = CameraOrigin;
    ray.direction = worldDir;
    Intersection primaryHit = tracePrimaryRay(ray);

    // Write out
    imageStore(i_visibility, ivec2(Gid), uvec4(primaryHit.primitiveId));

    vec4 projectedHit = C.projection * C.view * vec4(primaryHit.position, 1.0);
    projectedHit /= projectedHit.w;
    imageStore(i_depth, ivec2(Gid), vec4(projectedHit.z));

    vec3 normal;
    if (primaryHit.primitiveId != -1u)
        normal = normalize(primaryHit.position - Spheres[primaryHit.primitiveId].center);
    else
        normal = ray.direction;
    imageStore(i_normal, ivec2(Gid), vec4(normal, 0.0));

    vec4 prevProjectedHit = C.projection * C.prevView * vec4(primaryHit.position, 1.0);
    prevProjectedHit /= prevProjectedHit.w;
    imageStore(i_motion, ivec2(Gid), vec4((projectedHit.xy - prevProjectedHit.xy) / OutPitch, 0.0, 0.0));
}
