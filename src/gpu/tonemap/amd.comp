#version 460
#pragma shader_stage(compute)

#include "../util.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform sampler2D s_src;
layout(binding = 1) restrict writeonly uniform image2D i_dst;
layout(push_constant) uniform Constants {
    float exposure;
    float hdrMax;   // How much HDR range before clipping. HDR modes likely need this pushed up to say 25.0.
    float contrast; // Use as a baseline to tune the amount of contrast the tonemapper has.
    float shoulder; // Likely donâ€™t need to mess with this factor, unless matching existing tonemapper is not working well..
    float midIn;    // most games will have a {0.0 to 1.0} range for LDR so midIn should be 0.18.
    float midOut;   // Use for LDR. For HDR10 10:10:10:2 use maybe 0.18/25.0 to start. For scRGB, I forget what a good starting point is, need to re-calculate.
} C;

// https://github.com/GPUOpen-LibrariesAndSDKs/Cauldron/blob/master/src/VK/shaders/tonemappers.glsl

// General tonemapping operator, build 'b' term.
float ColToneB(float hdrMax, float contrast, float shoulder, float midIn, float midOut) {
    return
    -((-pow(midIn, contrast) + (midOut*(pow(hdrMax, contrast*shoulder)*pow(midIn, contrast) -
    pow(hdrMax, contrast)*pow(midIn, contrast*shoulder)*midOut)) /
    (pow(hdrMax, contrast*shoulder)*midOut - pow(midIn, contrast*shoulder)*midOut)) /
    (pow(midIn, contrast*shoulder)*midOut));
}

// General tonemapping operator, build 'c' term.
float ColToneC(float hdrMax, float contrast, float shoulder, float midIn, float midOut) {
    return (pow(hdrMax, contrast*shoulder)*pow(midIn, contrast) - pow(hdrMax, contrast)*pow(midIn, contrast*shoulder)*midOut) /
    (pow(hdrMax, contrast*shoulder)*midOut - pow(midIn, contrast*shoulder)*midOut);
}

// General tonemapping operator, p := {contrast,shoulder,b,c}.
float ColTone(float x, vec4 p) {
    float z = pow(x, p.r);
    return z / (pow(z, p.g)*p.b + p.a);
}

vec3 AMDTonemapper(vec3 color) {
    float b = ColToneB(C.hdrMax, C.contrast, C.shoulder, C.midIn, C.midOut);
    float c = ColToneC(C.hdrMax, C.contrast, C.shoulder, C.midIn, C.midOut);

    #define EPS 1e-6f
    float peak = max(color.r, max(color.g, color.b));
    peak = max(EPS, peak);

    vec3 ratio = color / peak;
    peak = ColTone(peak, vec4(C.contrast, C.shoulder, b, c));
    // then process ratio

    // probably want send these pre-computed (so send over saturation/crossSaturation as a constant)
    float crosstalk = 4.0; // controls amount of channel crosstalk
    float saturation = C.contrast; // full tonal range saturation control
    float crossSaturation = C.contrast*16.0; // crosstalk saturation

    float white = 1.0;

    // wrap crosstalk in transform
    ratio = pow(abs(ratio), vec3(saturation / crossSaturation));
    ratio = mix(ratio, vec3(white), vec3(pow(peak, crosstalk)));
    ratio = pow(abs(ratio), vec3(crossSaturation));

    // then apply ratio to peak
    color = peak * ratio;
    return color;
}

void main() {
    const uvec2 Gid = gl_GlobalInvocationID.xy;
    const uvec2 DstSize = uvec2(imageSize(i_dst));
    if (any(greaterThanEqual(Gid, DstSize))) return;

    vec3 source = texelFetch(s_src, ivec2(Gid), 0).xyz;
    source *= C.exposure;
    vec3 mapped = AMDTonemapper(source);
    imageStore(i_dst, ivec2(Gid), vec4(srgbEncode(mapped), 1.0));
}
