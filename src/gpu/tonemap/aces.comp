#version 460
#pragma shader_stage(compute)

#include "../util.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform sampler2D s_src;
layout(binding = 1) restrict writeonly uniform image2D i_dst;
layout(push_constant) uniform Constants {
    float exposure;
} C;

// https://github.com/TheRealMJP/BakingLab/blob/master/BakingLab/ACES.hlsl
const mat3 ACESInputMat = {
    {0.59719, 0.35458, 0.04823},
    {0.07600, 0.90834, 0.01566},
    {0.02840, 0.13383, 0.83777},
};

// ODT_SAT => XYZ => D60_2_D65 => sRGB
const mat3 ACESOutputMat = {
    { 1.60475, -0.53108, -0.07367},
    {-0.10208,  1.10813, -0.00605},
    {-0.00327, -0.07276,  1.07602},
};

vec3 RRTAndODTFit(vec3 v) {
    vec3 a = v * (v + 0.0245786f) - 0.000090537f;
    vec3 b = v * (0.983729f * v + 0.4329510f) + 0.238081f;
    return a / b;
}

vec3 acesFitted(vec3 color) {
    color = color * ACESInputMat;

    // Apply RRT and ODT
    color = RRTAndODTFit(color);
    color = color * ACESOutputMat;

    color = clamp(color, 0.0, 1.0);
    return color;
}

void main() {
    const uvec2 Gid = gl_GlobalInvocationID.xy;
    const uvec2 DstSize = uvec2(imageSize(i_dst));
    if (any(greaterThanEqual(Gid, DstSize))) return;

    vec3 source = texelFetch(s_src, ivec2(Gid), 0).xyz;
    source *= C.exposure;
    vec3 mapped = acesFitted(source);
    imageStore(i_dst, ivec2(Gid), vec4(srgbEncode(mapped), 1.0));
}
